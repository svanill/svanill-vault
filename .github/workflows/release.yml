name: Build, bump tag version and release

on:
  push:
    branches:
      - release

defaults:
  run:
    shell: bash

jobs:
  verify-tests-and-formatting:
    name: Run tests and check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --bins --examples --tests --benches -- -D warnings

      - name: Run cargo tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --bins --examples --tests --benches

  dist:
    needs: verify-tests-and-formatting
    name: dist
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked

      - name: Strip release binary (linux/macos)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          strip target/release/svanill-vault-cli
          strip target/release/svanill-vault-server

      - name: Upload artifacts (linux/macos)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: dist-${{ matrix.os }}
          path: |
            target/release/svanill-vault-cli
            target/release/svanill-vault-server

      - name: Upload artifacts (windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: dist-${{ matrix.os }}
          path: |
            target/release/svanill-vault-cli.exe
            target/release/svanill-vault-server.exe

  docker-image:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: riquito
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Build the docker image
        run: |
          cp dist/dist-ubuntu-latest/svanill-vault-cli docker/
          cp dist/dist-ubuntu-latest/svanill-vault-server docker/
          cd docker
          docker build -t ghcr.io/riquito/svanill-vault-server:latest .
          docker push ghcr.io/riquito/svanill-vault-server:latest

      - name: Get server version from Cargo.toml
        id: server-version-by-cargo
        run: |
          echo "::set-output name=version::$(cargo metadata --offline --no-deps --format-version=1 | jq --raw-output '.packages[] | select(.name == "svanill-vault-server").version')"

      - name: Is a new release?
        id: is-new-version
        run: |
          echo "::set-output name=result::$(test $(git tag --list svanill-vault-server-${{ steps.server-version-by-cargo.outputs.version }}) && echo "" || echo ${{ steps.server-version-by-cargo.outputs.version }})"

      - name: Tag the docker image with the new version
        if: steps.is-new-version.outputs.result != ''
        run: |
          docker tag ghcr.io/riquito/svanill-vault-server:latest ghcr.io/riquito/svanill-vault-server:${{ steps.server-version-by-cargo.outputs.version }}
          docker push ghcr.io/riquito/svanill-vault-server:${{ steps.server-version-by-cargo.outputs.version }}

  release:
    needs: dist
    name: Release
    strategy:
      matrix:
        crate: [svanill-vault-cli, svanill-vault-server]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.crate }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions/download-artifact@v2
        with:
          path: dist

      - name: List dist files
        run: ls -R
        working-directory: dist

      - name: Get version from Cargo.toml
        id: version-by-cargo
        run: |
          echo "::set-output name=version::${{ matrix.crate }}-$(cargo metadata --offline --no-deps --format-version=1 | jq --raw-output '.packages[] | select(.name == "${{ matrix.crate }}").version')"

      - name: Is a new release?
        id: is-new-version
        run: |
          echo "::set-output name=result::$(test $(git tag --list ${{ steps.version-by-cargo.outputs.version }}) && echo "" || echo ${{ steps.version-by-cargo.outputs.version }})"

      - name: Push tag/create release point
        if: steps.is-new-version.outputs.result != ''
        uses: anothrNick/github-tag-action@1.17.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CUSTOM_TAG: ${{ steps.is-new-version.outputs.result }}

      - name: Release linux binary
        if: steps.is-new-version.outputs.result != ''
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/dist-ubuntu-latest/${{ matrix.crate }}
          asset_name: ${{ matrix.crate }}-x86_64-unknown-linux-gnu
          tag: ${{ steps.is-new-version.outputs.result }}
          release_name: ${{ steps.is-new-version.outputs.result }}
          overwrite: true

      - name: Release windows binary
        if: steps.is-new-version.outputs.result != ''
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/dist-windows-latest/${{ matrix.crate }}.exe
          asset_name: ${{ matrix.crate }}-x86_64-pc-windows-msvc.exe
          tag: ${{ steps.is-new-version.outputs.result }}
          release_name: ${{ steps.is-new-version.outputs.result }}
          overwrite: true

      - name: Release macos binary
        if: steps.is-new-version.outputs.result != ''
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/dist-macos-latest/${{ matrix.crate }}
          asset_name: ${{ matrix.crate }}-x86_64-apple-darwin
          tag: ${{ steps.is-new-version.outputs.result }}
          release_name: ${{ steps.is-new-version.outputs.result }}
          overwrite: true
